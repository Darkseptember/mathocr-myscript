CAPLETTER = A B C E F G H I L M N P R S T V X Y
DIGIT = 0 1 2 3 4 5 6 7 8 9
LETTER = A B C E F G H I L M N P R S T V X Y a b c d e f g h i j k l m n o p q r s t u v w x y z α β γ λ π θ µ σ φ ϕ Δ
OPEQ = ≤ ≥ < > = ≠
DOTS = …
COMMA = ,
OPPROD = - + ± × · / ÷ .
BIGOP = ∑
FUNCLOG = log
FUNCTRIGO = sin cos tan
DECIMALSEP = , .
ARROW = →
DOT = .
FACTORIAL = !
INTEGRAL_SIGN = ∫
PLUS = +
PRIME = '
QUANTIFIER_OP = ∈
QUANTIFIER_SYMB = ∃ ∀
SET_OP = ×
OPENP = (
OPEN_BRACE = {
OPEN_BRACKET = [
CLOSEP = )
CLOSE_BRACE = }
CLOSE_BRACKET = ]
VBAR = |
OTHER = ∞
OPSUM = + -
LIMIT_SIGN = lim

INTEGRAL::=underoverscript(INTEGRAL_SIGN,EXP,EXP)
	| identity(INTEGRAL_SIGN)
CONTISUM ::= hpair(INTEGRAL,EXP)
EXP ::= hpair(OPSUM,TERM)
    | identity(TERM)
    | hpair(OPSUM,LEFTRIGHTPAIR)
    | hpair(OPSUM,TERM_EXP)
    | identity(LEFTRIGHTPAIR)
    | identity(LIMIT)
    | identity(SERIES)
    | identity(CONTISUM)
TERM_EXP ::= hpair(TERM,EXP)
EXP_F_DEF ::= hpair(LETTER,ARROW_EXP)
    | hpair(LETTER,ARROW_END)
ARROW_END ::= hpair(ARROW,ARROW_DEF)
ARROW_EXP ::= hpair(ARROW,EXP)
ARROW_DEF ::= hpair(ARROW,EXP_F_DEF)
EXP_LIST ::= hpair(EXP,COMMA_R)
EXP_LIST_R ::= hpair(EXP,COMMA_R)
    | hpair(DOTS,COMMA_R)
    | identity(DOTS)
    | identity(EXP)
COMMA_R ::= hpair(COMMA,EXP_LIST_R)
FLOAT ::= hpair(DIGIT,REMAINING)
REMAINING ::= hpair(DECIMALSEP,DIGIT)
FORMULA ::= identity(EXP)
    | hpair(EXP,OPEQ_EXP)
    | hpair(EXP,OPEQ_EXP_PAIR)
    | identity(EXP_LIST)
    | hpair(QUANTIFIER_LIST,FORMULA)
    | identity(QUANTIFIER_LIST)
    | identity(SET_EXP)
    | identity(EXP_F_DEF)
OPEQ_EXP_PAIR ::= hpair(OPEQ_EXP,OPEQ_EXP)
FRACTION ::= fraction(EXP,EXP)
FUNCTION ::= superscript(FUNCTRIGO,SYMBOL)
    | subscript(FUNCLOG,SYMBOL)
    | identity(FUNCLOG)
    | identity(FUNCTRIGO)
LEFTRIGHTPAIR ::= hpair(LEFTRIGHTPAIR,OPPROD_LREND)
    | hpair(LEFTRIGHTPAIR,LREND)
    | hpair(LREND,LREND)
    | hpair(LREND,OPPROD_LREND)
OPPROD_LREND ::= hpair(OPPROD,LREND)
LREND ::= identity(DOTS)
    | identity(TERM)
PAREXP ::= fence(EXP,OPENP,CLOSEP)
    | fence(EXP_LIST,OPENP,CLOSEP)
    | fence(EXP_LIST,OPEN_BRACKET,CLOSE_BRACKET)
    | fence(EXP,OPEN_BRACKET,CLOSE_BRACKET)
    | fence(EXP_LIST,OPEN_BRACE,CLOSE_BRACE)
    | fence(EXP,OPEN_BRACE,CLOSE_BRACE)
    | fence(EXP,VBAR,VBAR)
    | identity(ROOT)
QUANTIFIER_LIST ::= identity(QUANTIFIER_ONE)
    | hpair(QUANTIFIER_ONE,COMMA)
QUANTIFIER_ONE ::= hpair(QUANTIFIER_SYMB,LETTER)
    | hpair(QUANTIFIER_SYMB,RANGE)
    | identity(RANGE)
RANGE ::= hpair(LETTER,QOP_EXP)
    | hpair(LETTER,QOP_PEXP)
SET_EXP ::= hpair(SETS,SET_OP_EXP)
    | identity(SETS)
    | superscript(SETS,DIGIT)
QOP_EXP ::= hpair(QUANTIFIER_OP,SET_EXP)
QOP_PEXP ::= hpair(QUANTIFIER_OP,PAREXP)
SET_OP_EXP ::= hpair(SET_OP,SET_EXP)
TERM ::= identity(SYMBOL)
    | identity(FLOAT)
    | hpair(SYMBOL,FACTORIAL)
    | identity(PAREXP)
    | hpair(FUNCTION,TERM_OR_BRACED_LR)
    | superscript(TERM_OR_BRACED_LR,EXP)
    | subsuperscript(TERM_OR_BRACED_LR,EXP,EXP)
    | superscript(TERM_OR_BRACED_LR,FRACTION)
    | superscript(PAREXP,EXP)
    | subscript(SYMBOL,EXP)
    | subscript(WORD,EXP)
    | subscript(SYMBOL,EXP_LIST)
    | hpair(LETTER,PRIME)
    | superscript(LETTER,PRIME)
TERM_OR_BRACED_LR ::= identity(LEFTRIGHTPAIR)
    | identity(TERM)
LIMIT ::= hpair(LIMIT_RAW,EXP)
	| hpair(LIMIT_SIGN,EXP)
    | identity(FRACTION)
LIMIT_RAW ::= underscript(LIMIT_SIGN,SUBLIMIT)
SERIES ::= hpair(BIGOP,EXP)
    | hpair(SERIES_HEAD1,EXP)
    | hpair(SERIES_HEAD2,EXP)
SERIES_HEAD1 ::= underscript(BIGOP,SUBSERIES)
SERIES_HEAD2 ::= underoverscript(BIGOP,SUBSERIES,EXP)
SUBLIMIT ::= identity(SYMBOL)
    | hpair(SYMBOL,ARROW_EXP)
SUBSERIES ::= identity(EXP)
    | hpair(SYMBOL,OPEQ_EXP)
OPEQ_EXP ::= hpair(OPEQ,EXP)
ROOT ::= identity(SQRT)
    | presuperscript(SQRT,SYMBOL)
SQRT ::= sqrt(EXP)
WORD ::= hpair(LETTER,LETTER)
    | hpair(LETTER,WORD)
SETS ::= identity(CAPLETTER)
SYMBOL ::= identity(DIGIT)
	| identity(LETTER)
	| identity(OTHER)
start(FORMULA)